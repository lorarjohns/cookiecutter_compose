# import config.
# You can change the default config with `make cnf="config_special.env" build`
cnf ?= config.env
include $(cnf)
export $(shell sed 's/=.*//' $(cnf))

.PHONY: help

# HELP
# This will output the help for each task
# thanks to https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html

help: ## This help.
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
.DEFAULT_GOAL := help

###########################################################################################################
## SCRIPTS
###########################################################################################################


###########################################################################################################
## VARIABLES
###########################################################################################################
export TARGET=
export PWD=`pwd`
export PYTHONPATH=$PYTHONPATH:$(PWD)
export PROJECT_NAME={{ cookiecutter.project_slug }}
export IMAGE_NAME=$(PROJECT_NAME)-image
export CONTAINER_NAME=$(PROJECT_NAME)-container
export PYTHON=python3
export DOCKERFILE=docker/Dockerfile

###########################################################################################################
## ADD TARGETS SPECIFIC TO "{{ cookiecutter.project_slug }}"
###########################################################################################################


###########################################################################################################
## GENERAL TARGETS
###########################################################################################################


# DOCKER COMMANDS

#build-run: ## Build the release and develoment container. The development
#	docker-compose build --no-cache $(PROJECT_NAME)
#	docker-compose run $(PROJECT_NAME) grunt build
#	docker build -t $(PROJECT_NAME) .
	
#run: stop ## Run container on port configured in `config.env`
#	docker run -i -t --rm --env-file=./config.env -p=$(PORT):$(PORT) --name="$(PROJECT_NAME)" $(PROJECT_NAME)

# https://medium.com/applied-data-science/the-full-stack-data-scientist-part-2-a-practical-introduction-to-docker-1ea932c89b57

build: ## Create the two images
	docker-compose build 

up: ## Spin up the containers
	docker-compose up -d
	
bash: ## Load a bash shell inside the app container
	docker-compose exec app bash
	
jupyter-notebook: ## start a Jupyter Notebook server
	jupyter-notebook --ip=0.0.0.0 --allow-root # --no-browser

stop: ## Stop running containers
	docker-compose stop

clean: ## Clean the generated/compiles files
	echo "nothing clean ..."




test: ## run test cases in tests directory
	$(PYTHON) -m unittest discover

## black: ## format code with black

lint: ## check style with flake8
	flake8 cookie


clean-pyc: ## remove Python file artifacts
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	find . -name '__pycache__' -exec rm -fr {} +
